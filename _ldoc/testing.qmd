# Testing infrastructure

When writing code, it is helpful to write lots of unit tests, and
Julia has an excellent [unit testing infrastructure][testjl] to
support this.  During the process of development, I usually write
tests embedded with the code that I am developing.  As I become more
confident, I move the tests into a separate test suite file (or files).

[testjl]: https://docs.julialang.org/en/v1/stdlib/Test/

It is also useful to write tests when doing mathematical derivations
(e.g. checking that we have done the algebra for differentiation
correctly by comparing against a finite difference approximation).
For testing derivatives for functions of several variables, it is
usually sufficient to check the directional derivative in a random
direction.

```{.julia}
"""
    diff_fd(f, x=0.0; h=1e-6)

Compute a centered difference estimate of f'(x) with step size h.
"""
diff_fd(f, x=0.0; h=1e-6) = (f(x+h)-f(x-h))/(2h)

```

It is useful to have a convenience function for evaluating a function
at a set of sample points in order to compute weights.  We will also
frequently run examples with a low-discrepancy sampling sequence, and
so we put together some infrastructure for this as well.

```{.julia}
sample_eval(f, X :: AbstractMatrix) = [f(x) for x in eachcol(X)]
sample_eval2(f, X :: AbstractMatrix) = [f(x...) for x in eachcol(X)]

function test_setup2d(f, n)
    Zk = kronecker_quasirand(2,n)
    y = sample_eval2(f, Zk)
    Zk, y
end

test_setup2d(f) = test_setup2d(f,10)
```


